{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { CdkDrag, CdkDropList } from '@angular/cdk/drag-drop';\nexport let AdminDashboardComponent = class AdminDashboardComponent {\n  constructor(router, fb, renderer) {\n    this.router = router;\n    this.fb = fb;\n    this.renderer = renderer;\n    this.title = 'Personnel Information Management';\n    // Dashboard stats\n    this.totalEmployees = 345;\n    this.employeeChange = 5;\n    this.pendingRequests = 12;\n    this.requestChange = -2;\n    this.recentMovements = 23;\n    this.movementChange = 3;\n    // Analytics metrics\n    this.turnoverRate = 8.5;\n    this.turnoverRateChange = 1.2;\n    this.satisfactionLevel = 4.2;\n    this.satisfactionChange = 0.3;\n    this.performanceRating = 85;\n    this.performanceChange = 2.5;\n    this.departmentStats = [{\n      name: 'IT',\n      count: 45,\n      percentage: 30\n    }, {\n      name: 'HR',\n      count: 30,\n      percentage: 20\n    }, {\n      name: 'Finance',\n      count: 25,\n      percentage: 17\n    }, {\n      name: 'Marketing',\n      count: 20,\n      percentage: 13\n    }, {\n      name: 'Operations',\n      count: 30,\n      percentage: 20\n    }, {\n      name: 'Graphics',\n      count: 20,\n      percentage: 40\n    }];\n    this.recentEmployees = [{\n      id: 1,\n      firstName: 'Sarah',\n      lastName: 'Johnson',\n      email: 'sarah.j@acme.com',\n      department: 'Marketing',\n      position: 'Marketing Manager',\n      status: 'Active',\n      hireDate: '15 Jan 2020',\n      profileImage: 'https://randomuser.me/api/portraits/women/44.jpg'\n    }, {\n      id: 2,\n      firstName: 'Michael',\n      lastName: 'Chen',\n      email: 'michael.c@acme.com',\n      department: 'Engineering',\n      position: 'Senior Developer',\n      status: 'Active',\n      hireDate: '22 Mar 2019',\n      profileImage: 'https://randomuser.me/api/portraits/men/32.jpg'\n    }, {\n      id: 3,\n      firstName: 'Emily',\n      lastName: 'Rodriguez',\n      email: 'emily.r@acme.com',\n      department: 'Human Resources',\n      position: 'HR Specialist',\n      status: 'On Leave',\n      hireDate: '05 Aug 2021',\n      profileImage: 'https://randomuser.me/api/portraits/women/68.jpg'\n    }, {\n      id: 4,\n      firstName: 'David',\n      lastName: 'Wilson',\n      email: 'david.w@acme.com',\n      department: 'Finance',\n      position: 'Financial Analyst',\n      status: 'Active',\n      hireDate: '12 Nov 2022',\n      profileImage: 'https://randomuser.me/api/portraits/men/75.jpg'\n    }, {\n      id: 5,\n      firstName: 'Michael',\n      lastName: 'Chen',\n      email: 'michael.c@acme.com',\n      department: 'Engineering',\n      position: 'Senior Developer',\n      status: 'Active',\n      hireDate: '22 Mar 2019',\n      profileImage: 'https://randomuser.me/api/portraits/men/32.jpg'\n    }, {\n      id: 6,\n      firstName: 'Emily',\n      lastName: 'Rodriguez',\n      email: 'emily.r@acme.com',\n      department: 'Human Resources',\n      position: 'HR Specialist',\n      status: 'On Leave',\n      hireDate: '05 Aug 2021',\n      profileImage: 'https://randomuser.me/api/portraits/women/68.jpg'\n    }, {\n      id: 7,\n      firstName: 'David',\n      lastName: 'Wilson',\n      email: 'david.w@acme.com',\n      department: 'Finance',\n      position: 'Financial Analyst',\n      status: 'Active',\n      hireDate: '12 Nov 2022',\n      profileImage: 'https://randomuser.me/api/portraits/men/75.jpg'\n    }];\n    // Pagination properties\n    this.currentPage = 1;\n    this.pageSize = 5;\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.searchTerm = '';\n    this.paginatedEmployees = [];\n    this.Math = Math; // Make Math available in template\n    this.showEditModal = false;\n    this.selectedEmployee = null;\n    this.isEditMode = false;\n    this.selectedCard = null;\n    this.showCustomizeModal = false;\n    this.availableColors = [{\n      name: 'White',\n      value: '#fff'\n    }, {\n      name: 'Blue',\n      value: '#649dfa'\n    }, {\n      name: 'Green',\n      value: '#38ffbd'\n    }, {\n      name: 'Purple',\n      value: '#a182e8'\n    }, {\n      name: 'Orange',\n      value: '#fc9751'\n    }, {\n      name: 'Yellow',\n      value: '#f4fa57'\n    }, {\n      name: 'Cyan',\n      value: \"#02faf6\"\n    }];\n    this.statCards = [{\n      id: 'totalEmployees',\n      title: 'Total Employees',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/1077/1077114.png',\n      description: 'Current headcount',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'number'\n    }, {\n      id: 'pendingRequests',\n      title: 'Pending Requests',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/1828/1828843.png',\n      description: 'Awaiting approval',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'number'\n    }, {\n      id: 'recentMovements',\n      title: 'Recent Movements',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/747/747310.png',\n      description: 'Last 30 days',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'number'\n    }, {\n      id: 'turnoverRate',\n      title: 'Employee Turnover Rate',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',\n      description: 'Last 12 months',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'percentage'\n    }, {\n      id: 'satisfactionLevel',\n      title: 'Average Satisfaction Level',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',\n      description: 'Employee survey',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'percentage'\n    }, {\n      id: 'performanceRating',\n      title: 'Performance Rating',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/1828/1828971.png',\n      description: 'Average score',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'rating'\n    }];\n    // New container template\n    this.newCardTemplate = {\n      id: 'new',\n      title: 'New Stat',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/1828/1828843.png',\n      description: 'Add description',\n      isVisible: true,\n      color: '#fff',\n      dataType: 'number'\n    };\n    this.pieColors = ['#1993e5', '#10b981', '#f97316', '#8b5cf6', '#ef4444', '#6366f1', '#f59e42', '#22d3ee'];\n    this.chartTypes = ['pie', 'bar', 'line', 'area'];\n    this.currentChartTypeIndex = 0;\n    this.chartType = 'pie';\n    this.showChartTypeMenu = false;\n    this.isChartEditMode = false;\n    // Tooltip state for chart hover\n    this.chartTooltip = {\n      visible: false,\n      x: 0,\n      y: 0,\n      label: '',\n      value: 0\n    };\n    this.totalActiveEmployees = 300;\n    this.totalInactiveEmployees = 30;\n    this.totalOnleaveEmployees = 15;\n    this.metricOptions = [{\n      title: 'Total Employees',\n      value: this.totalEmployees,\n      description: 'Current headcount',\n      dataType: 'number'\n    }, {\n      title: 'Pending Requests',\n      value: this.pendingRequests,\n      description: 'Awaiting approval',\n      dataType: 'number'\n    }, {\n      title: 'Recent Movements',\n      value: this.recentMovements,\n      description: 'Last 30 days',\n      dataType: 'number'\n    }, {\n      title: 'Employee Turnover Rate',\n      value: this.turnoverRate,\n      description: 'Last 12 months',\n      dataType: 'percentage'\n    }, {\n      title: 'Average Satisfaction Level',\n      value: this.satisfactionLevel,\n      description: 'Employee survey',\n      dataType: 'percentage'\n    }, {\n      title: 'Performance Rating',\n      value: this.performanceRating,\n      description: 'Average score',\n      dataType: 'rating'\n    }, {\n      title: 'Total Active Employees',\n      value: this.totalActiveEmployees,\n      description: 'Active employees',\n      dataType: 'number'\n    }, {\n      title: 'Total Inactive Employees',\n      value: this.totalInactiveEmployees,\n      description: 'Inactive employees',\n      dataType: 'number'\n    }, {\n      title: 'Total Onleave Employees',\n      value: this.totalOnleaveEmployees,\n      description: 'Employees on leave',\n      dataType: 'number'\n    }];\n    this.titleIconMap = {\n      'Total Employees': 'https://cdn-icons-png.flaticon.com/512/2922/2922510.png',\n      'Pending Requests': 'https://cdn-icons-png.flaticon.com/512/3596/3596095.png',\n      'Recent Movements': 'https://cdn-icons-png.flaticon.com/512/3303/3303892.png',\n      'Employee Turnover Rate': 'https://cdn-icons-png.flaticon.com/512/1040/1040230.png',\n      'Average Satisfaction Level': 'https://cdn-icons-png.flaticon.com/512/2583/2583395.png',\n      'Performance Rating': 'https://cdn-icons-png.flaticon.com/512/1828/1828884.png',\n      'Total Active Employees': 'https://cdn-icons-png.flaticon.com/512/190/190411.png',\n      'Total Inactive Employees': 'https://cdn-icons-png.flaticon.com/512/1828/1828843.png',\n      'Total Onleave Employees': 'https://cdn-icons-png.flaticon.com/512/11498/11498606.png'\n    };\n    this.editEmployeeForm = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      department: ['', Validators.required],\n      position: ['', Validators.required],\n      hireDate: ['', Validators.required],\n      status: ['Active', Validators.required]\n    });\n    this.customizeForm = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      color: ['#fff'],\n      dataType: ['number'],\n      isVisible: [true]\n    });\n  }\n  onScroll() {\n    this.checkScroll();\n  }\n  ngOnInit() {\n    const savedCards = localStorage.getItem('statCards');\n    if (savedCards) {\n      this.statCards = JSON.parse(savedCards);\n    }\n    // Restore chart type if present\n    const savedChartType = localStorage.getItem('chartType');\n    if (savedChartType && this.chartTypes.includes(savedChartType)) {\n      this.chartType = savedChartType;\n      this.currentChartTypeIndex = this.chartTypes.indexOf(this.chartType);\n    }\n    this.updatePagination();\n    setTimeout(() => {\n      this.checkScroll();\n    }, 100);\n    // Initialize stat cards with actual data\n    this.statCards[0].value = this.totalEmployees;\n    this.statCards[0].change = this.employeeChange;\n    this.statCards[1].value = this.pendingRequests;\n    this.statCards[1].change = this.requestChange;\n    this.statCards[2].value = this.recentMovements;\n    this.statCards[2].change = this.movementChange;\n    this.statCards[3].value = this.turnoverRate;\n    this.statCards[3].change = this.turnoverRateChange;\n    this.statCards[4].value = this.satisfactionLevel;\n    this.statCards[4].change = this.satisfactionChange;\n    this.statCards[5].value = this.performanceRating;\n    this.statCards[5].change = this.performanceChange;\n  }\n  // Pagination methods\n  updatePagination() {\n    // Filter employees based on search term\n    let filteredEmployees = this.recentEmployees;\n    if (this.searchTerm) {\n      const searchLower = this.searchTerm.toLowerCase();\n      filteredEmployees = this.recentEmployees.filter(emp => emp.firstName.toLowerCase().includes(searchLower) || emp.lastName.toLowerCase().includes(searchLower) || emp.department.toLowerCase().includes(searchLower) || emp.position.toLowerCase().includes(searchLower) || emp.status.toLowerCase().includes(searchLower));\n    }\n    this.totalItems = filteredEmployees.length;\n    this.totalPages = Math.ceil(this.totalItems / this.pageSize);\n    // Ensure current page is valid\n    if (this.currentPage > this.totalPages) {\n      this.currentPage = this.totalPages || 1;\n    }\n    // Get paginated data\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    this.paginatedEmployees = filteredEmployees.slice(startIndex, startIndex + this.pageSize);\n  }\n  onPageChange(page) {\n    this.currentPage = page;\n    this.updatePagination();\n    // Scroll to bottom of the page\n    setTimeout(() => {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth'\n      });\n    }, 100); // Small delay to ensure content is updated\n  }\n\n  onPageSizeChange(event) {\n    const select = event.target;\n    this.pageSize = parseInt(select.value, 10);\n    this.currentPage = 1; // Reset to first page when changing page size\n    this.updatePagination();\n  }\n  onSearch(event) {\n    const input = event.target;\n    this.searchTerm = input.value;\n    this.currentPage = 1; // Reset to first page when searching\n    this.updatePagination();\n  }\n  getPageNumbers() {\n    const pages = [];\n    const maxVisiblePages = 5;\n    if (this.totalPages <= maxVisiblePages) {\n      // Show all pages if total pages is less than max visible\n      for (let i = 1; i <= this.totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      // Always show first page\n      pages.push(1);\n      // Calculate start and end of visible pages\n      let start = Math.max(2, this.currentPage - 1);\n      let end = Math.min(this.totalPages - 1, this.currentPage + 1);\n      // Adjust if at the start\n      if (this.currentPage <= 2) {\n        end = 4;\n      }\n      // Adjust if at the end\n      if (this.currentPage >= this.totalPages - 1) {\n        start = this.totalPages - 3;\n      }\n      // Add ellipsis if needed\n      if (start > 2) {\n        pages.push(-1); // -1 represents ellipsis\n      }\n      // Add middle pages\n      for (let i = start; i <= end; i++) {\n        pages.push(i);\n      }\n      // Add ellipsis if needed\n      if (end < this.totalPages - 1) {\n        pages.push(-2); // -2 represents ellipsis\n      }\n      // Always show last page\n      pages.push(this.totalPages);\n    }\n    return pages;\n  }\n  onAddEmployee() {\n    this.router.navigate(['/personnel-information-management/add-employee']);\n  }\n  onEditEmployee(employee) {\n    this.selectedEmployee = employee;\n    this.editEmployeeForm.patchValue({\n      firstName: employee.firstName,\n      lastName: employee.lastName,\n      email: employee.email,\n      department: employee.department,\n      position: employee.position,\n      hireDate: employee.hireDate,\n      status: employee.status\n    });\n    this.showEditModal = true;\n  }\n  closeEditModal(event) {\n    event.preventDefault();\n    this.showEditModal = false;\n    this.selectedEmployee = null;\n    this.editEmployeeForm.reset();\n  }\n  onSubmitEdit() {\n    if (this.editEmployeeForm.valid && this.selectedEmployee) {\n      // Here you would typically make an API call to update the employee\n      const updatedEmployee = {\n        ...this.selectedEmployee,\n        ...this.editEmployeeForm.value\n      };\n      // Update the employee in the local array\n      const index = this.recentEmployees.findIndex(emp => emp.id === this.selectedEmployee?.id);\n      if (index !== -1) {\n        this.recentEmployees[index] = updatedEmployee;\n      }\n      // Close the modal\n      this.closeEditModal(new Event('click'));\n    }\n  }\n  onDeleteEmployee(employee) {\n    if (confirm(`Are you sure you want to delete ${employee.firstName} ${employee.lastName}?`)) {\n      // Call service to delete employee\n      console.log('Deleting employee:', employee);\n    }\n  }\n  onProcessRequests() {\n    this.router.navigate(['/personnel-information-management/requests']);\n  }\n  getDepartmentIcon(department) {\n    const icons = {\n      'IT': 'computer',\n      'HR': 'group',\n      'Finance': 'account_balance',\n      'Marketing': 'campaign',\n      'Operations': 'settings',\n      'Engineering': 'engineering',\n      'Sales': 'trending_up',\n      'Customer Support': 'support_agent',\n      'Research': 'science',\n      'Legal': 'gavel',\n      'Product': 'inventory_2',\n      'Design': 'palette'\n    };\n    return icons[department] || 'business';\n  }\n  checkScroll() {\n    const elements = document.querySelectorAll('.scroll-animate');\n    elements.forEach(element => {\n      const rect = element.getBoundingClientRect();\n      const isVisible = rect.top <= window.innerHeight * 0.95;\n      if (isVisible) {\n        element.classList.add('visible');\n      }\n    });\n  }\n  toggleEditMode() {\n    this.isEditMode = !this.isEditMode;\n    if (this.dropList) {\n      const dropListElement = this.dropList.element.nativeElement;\n      if (this.isEditMode) {\n        this.renderer.addClass(dropListElement, 'edit-mode');\n      } else {\n        this.renderer.removeClass(dropListElement, 'edit-mode');\n        this.saveDashboardChanges();\n        this.saveStatCardsToStorage(); // Save card order on save\n      }\n    }\n  }\n\n  saveDashboardChanges() {\n    // Here you would typically make an API call to save the dashboard changes\n    console.log('Saving dashboard changes...');\n  }\n  onCardClick(card) {\n    if (this.isEditMode) {\n      // Make a shallow copy for editing\n      this.selectedCard = {\n        ...card\n      };\n      this.customizeForm.patchValue({\n        title: card.title,\n        description: card.description,\n        color: card.color,\n        dataType: card.dataType,\n        isVisible: card.isVisible\n      });\n      this.showCustomizeModal = true;\n    }\n  }\n  saveCustomization() {\n    if (this.selectedCard && this.customizeForm.valid) {\n      const formValue = this.customizeForm.value;\n      // Find the card in statCards by id and update it\n      const idx = this.statCards.findIndex(c => c.id === this.selectedCard.id);\n      if (idx !== -1) {\n        this.statCards[idx] = {\n          ...this.statCards[idx],\n          ...formValue,\n          icon: this.titleIconMap[formValue.title]\n        };\n      } else {\n        // If not found, it's a new card (from addNewCard)\n        const newCard = {\n          ...this.selectedCard,\n          ...formValue,\n          icon: this.titleIconMap[formValue.title]\n        };\n        this.statCards.push(newCard);\n      }\n      this.showCustomizeModal = false;\n      this.selectedCard = null;\n      this.saveStatCardsToStorage();\n    }\n  }\n  closeCustomizeModal(event) {\n    event.preventDefault();\n    this.showCustomizeModal = false;\n    this.selectedCard = null;\n  }\n  getFormattedValue(card) {\n    switch (card.dataType) {\n      case 'percentage':\n        return `${card.value}%`;\n      case 'rating':\n        return `${card.value}/5`;\n      default:\n        return card.value.toString();\n    }\n  }\n  onDrop(event) {\n    if (this.isEditMode) {\n      const draggedElement = event.item.element.nativeElement;\n      const previousIndex = event.previousIndex;\n      const cards = Array.from(this.dropList?.element.nativeElement.children || []);\n      let pointerX = null;\n      let pointerY = null;\n      if (event.event && event.event.clientX !== undefined) {\n        pointerX = event.event.clientX;\n        pointerY = event.event.clientY;\n      }\n      let dropCenter = {\n        x: 0,\n        y: 0\n      };\n      if (pointerX !== null && pointerY !== null) {\n        dropCenter = {\n          x: pointerX,\n          y: pointerY\n        };\n      } else {\n        const draggedRect = draggedElement.getBoundingClientRect();\n        dropCenter = {\n          x: draggedRect.left + draggedRect.width / 2,\n          y: draggedRect.top + draggedRect.height / 2\n        };\n      }\n      let minDistance = Number.MAX_VALUE;\n      let nearestIndex = previousIndex;\n      cards.forEach((card, idx) => {\n        if (idx === previousIndex) return;\n        const rect = card.getBoundingClientRect();\n        const center = {\n          x: rect.left + rect.width / 2,\n          y: rect.top + rect.height / 2\n        };\n        const distance = Math.sqrt(Math.pow(center.x - dropCenter.x, 2) + Math.pow(center.y - dropCenter.y, 2));\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestIndex = idx;\n        }\n      });\n      if (previousIndex !== nearestIndex) {\n        const temp = this.statCards[previousIndex];\n        this.statCards[previousIndex] = this.statCards[nearestIndex];\n        this.statCards[nearestIndex] = temp;\n        this.saveStatCardsToStorage(); // Save card order after swap\n      }\n    }\n  }\n\n  onDragStarted(event) {\n    if (this.isEditMode) {\n      document.body.classList.add('dragging');\n      // Add a class to the dragged element\n      const draggedElement = event.source.element.nativeElement;\n      this.renderer.addClass(draggedElement, 'dragging');\n      // Add a class to the drop list\n      if (this.dropList) {\n        const dropListElement = this.dropList.element.nativeElement;\n        this.renderer.addClass(dropListElement, 'dragging-active');\n        this.renderer.addClass(dropListElement, 'edit-mode');\n      }\n    }\n  }\n  onDragEnded(event) {\n    document.body.classList.remove('dragging');\n    // Remove classes from the dragged element\n    const draggedElement = event.source.element.nativeElement;\n    this.renderer.removeClass(draggedElement, 'dragging');\n    this.renderer.removeClass(draggedElement, 'swapping');\n    this.renderer.removeStyle(draggedElement, 'transform');\n    // Remove class from the drop list\n    if (this.dropList) {\n      const dropListElement = this.dropList.element.nativeElement;\n      this.renderer.removeClass(dropListElement, 'dragging-active');\n    }\n  }\n  addNewCard() {\n    if (this.isEditMode) {\n      // Prepare a new card but do not add to statCards yet\n      const newCard = {\n        ...this.newCardTemplate,\n        id: `card-${Date.now()}` // Generate unique ID\n      };\n\n      this.selectedCard = {\n        ...newCard\n      };\n      this.customizeForm.patchValue({\n        title: newCard.title,\n        description: newCard.description,\n        color: newCard.color,\n        dataType: newCard.dataType,\n        isVisible: newCard.isVisible\n      });\n      this.showCustomizeModal = true;\n    }\n  }\n  removeCard(card) {\n    if (this.isEditMode) {\n      const index = this.statCards.findIndex(c => c.id === card.id);\n      if (index !== -1) {\n        this.statCards.splice(index, 1);\n      }\n    }\n  }\n  getPieColor(index) {\n    return this.pieColors[index % this.pieColors.length];\n  }\n  getPieDashArray(index) {\n    const total = this.departmentStats.reduce((sum, d) => sum + d.count, 0);\n    const value = this.departmentStats[index].count;\n    const circumference = 2 * Math.PI * 90;\n    const dash = value / total * circumference;\n    return `${dash} ${circumference - dash}`;\n  }\n  getPieDashOffset(index) {\n    const total = this.departmentStats.reduce((sum, d) => sum + d.count, 0);\n    const circumference = 2 * Math.PI * 90;\n    let offset = 0;\n    for (let i = 0; i < index; i++) {\n      offset += this.departmentStats[i].count / total * circumference;\n    }\n    return `${-offset}`;\n  }\n  setChartType(type) {\n    this.chartType = type;\n    this.currentChartTypeIndex = this.chartTypes.indexOf(type);\n  }\n  prevChartType() {\n    this.currentChartTypeIndex = (this.currentChartTypeIndex - 1 + this.chartTypes.length) % this.chartTypes.length;\n    this.chartType = this.chartTypes[this.currentChartTypeIndex];\n  }\n  nextChartType() {\n    this.currentChartTypeIndex = (this.currentChartTypeIndex + 1) % this.chartTypes.length;\n    this.chartType = this.chartTypes[this.currentChartTypeIndex];\n  }\n  getChartTypeLabel() {\n    switch (this.chartType) {\n      case 'pie':\n        return 'Pie';\n      case 'bar':\n        return 'Bar';\n      case 'line':\n        return 'Line';\n      case 'area':\n        return 'Area';\n      default:\n        return '';\n    }\n  }\n  toggleChartTypeMenu() {\n    this.showChartTypeMenu = !this.showChartTypeMenu;\n  }\n  getMaxDeptCount() {\n    return this.departmentStats.reduce((max, d) => Math.max(max, d.count), 0) || 1;\n  }\n  getLineChartPoints(xOffset = 0, yOffset = 0) {\n    if (!this.departmentStats || !this.departmentStats.length) return '';\n    return this.departmentStats.map((dept, i) => {\n      const x = 54 + i * 40 + xOffset;\n      const y = 200 - dept.count / this.getMaxDeptCount() * 160 + yOffset;\n      return `${x},${y}`;\n    }).join(' ');\n  }\n  getAreaChartPoints(xOffset = 0, yOffset = 0) {\n    if (!this.departmentStats || !this.departmentStats.length) return '';\n    let points = this.departmentStats.map((dept, i) => {\n      const x = 54 + i * 40 + xOffset;\n      const y = 200 - dept.count / this.getMaxDeptCount() * 160 + yOffset;\n      return `${x},${y}`;\n    });\n    // Close the area shape to the bottom\n    points.push(`${54 + (this.departmentStats.length - 1) * 40 + xOffset},200`);\n    points.push(`54,200`);\n    return points.join(' ');\n  }\n  getDepartmentTotal() {\n    return this.departmentStats.reduce((acc, d) => acc + d.count, 0);\n  }\n  getDepartmentPercentage(dept) {\n    const total = this.getDepartmentTotal();\n    return total ? dept.count / total * 100 : 0;\n  }\n  // Helper for column chart (optional, but for demo, columns are like bars with spacing)\n  getColumnChartX(i) {\n    return 20 + i * 35;\n  }\n  getColumnChartHeight(dept) {\n    return dept.count / this.getMaxDeptCount() * 180;\n  }\n  getColumnChartY(dept) {\n    return 220 - this.getColumnChartHeight(dept) - 20;\n  }\n  enterChartEditMode() {\n    this.isChartEditMode = true;\n  }\n  exitChartEditMode() {\n    this.isChartEditMode = false;\n    this.saveChartTypeToStorage();\n  }\n  showChartTooltip(event, label, value) {\n    this.chartTooltip.visible = true;\n    this.chartTooltip.x = event.clientX;\n    this.chartTooltip.y = event.clientY;\n    this.chartTooltip.label = label;\n    this.chartTooltip.value = value;\n  }\n  moveChartTooltip(event) {\n    if (this.chartTooltip.visible) {\n      this.chartTooltip.x = event.clientX;\n      this.chartTooltip.y = event.clientY;\n    }\n  }\n  hideChartTooltip() {\n    this.chartTooltip.visible = false;\n  }\n  ngAfterViewInit() {\n    const elements = document.querySelectorAll('.scroll-animate');\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('visible');\n        }\n      });\n    }, {\n      threshold: 0.15\n    });\n    elements.forEach(el => observer.observe(el));\n  }\n  onTitleChange(event) {\n    const selectedTitle = event.target.value;\n    const metric = this.metricOptions.find(m => m.title === selectedTitle);\n    if (metric && this.selectedCard) {\n      this.customizeForm.patchValue({\n        title: metric.title,\n        description: metric.description,\n        dataType: metric.dataType\n      });\n      this.selectedCard.value = metric.value;\n      this.selectedCard.description = metric.description;\n      this.selectedCard.dataType = metric.dataType;\n      this.selectedCard.icon = this.titleIconMap[metric.title];\n    }\n  }\n  saveStatCardsToStorage() {\n    localStorage.setItem('statCards', JSON.stringify(this.statCards));\n  }\n  saveChartTypeToStorage() {\n    localStorage.setItem('chartType', this.chartType);\n  }\n};\n__decorate([ViewChild(CdkDropList)], AdminDashboardComponent.prototype, \"dropList\", void 0);\n__decorate([HostListener('window:scroll', ['$event'])], AdminDashboardComponent.prototype, \"onScroll\", null);\nAdminDashboardComponent = __decorate([Component({\n  selector: 'app-admin-dashboard',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, CdkDrag, CdkDropList],\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.scss']\n})], AdminDashboardComponent);","map":{"version":3,"names":["Component","HostListener","ViewChild","CommonModule","FormsModule","ReactiveFormsModule","Validators","CdkDrag","CdkDropList","AdminDashboardComponent","constructor","router","fb","renderer","title","totalEmployees","employeeChange","pendingRequests","requestChange","recentMovements","movementChange","turnoverRate","turnoverRateChange","satisfactionLevel","satisfactionChange","performanceRating","performanceChange","departmentStats","name","count","percentage","recentEmployees","id","firstName","lastName","email","department","position","status","hireDate","profileImage","currentPage","pageSize","totalItems","totalPages","searchTerm","paginatedEmployees","Math","showEditModal","selectedEmployee","isEditMode","selectedCard","showCustomizeModal","availableColors","value","statCards","change","icon","description","isVisible","color","dataType","newCardTemplate","pieColors","chartTypes","currentChartTypeIndex","chartType","showChartTypeMenu","isChartEditMode","chartTooltip","visible","x","y","label","totalActiveEmployees","totalInactiveEmployees","totalOnleaveEmployees","metricOptions","titleIconMap","editEmployeeForm","group","required","customizeForm","onScroll","checkScroll","ngOnInit","savedCards","localStorage","getItem","JSON","parse","savedChartType","includes","indexOf","updatePagination","setTimeout","filteredEmployees","searchLower","toLowerCase","filter","emp","length","ceil","startIndex","slice","onPageChange","page","window","scrollTo","top","document","documentElement","scrollHeight","behavior","onPageSizeChange","event","select","target","parseInt","onSearch","input","getPageNumbers","pages","maxVisiblePages","i","push","start","max","end","min","onAddEmployee","navigate","onEditEmployee","employee","patchValue","closeEditModal","preventDefault","reset","onSubmitEdit","valid","updatedEmployee","index","findIndex","Event","onDeleteEmployee","confirm","console","log","onProcessRequests","getDepartmentIcon","icons","elements","querySelectorAll","forEach","element","rect","getBoundingClientRect","innerHeight","classList","add","toggleEditMode","dropList","dropListElement","nativeElement","addClass","removeClass","saveDashboardChanges","saveStatCardsToStorage","onCardClick","card","saveCustomization","formValue","idx","c","newCard","closeCustomizeModal","getFormattedValue","toString","onDrop","draggedElement","item","previousIndex","cards","Array","from","children","pointerX","pointerY","clientX","undefined","clientY","dropCenter","draggedRect","left","width","height","minDistance","Number","MAX_VALUE","nearestIndex","center","distance","sqrt","pow","temp","onDragStarted","body","source","onDragEnded","remove","removeStyle","addNewCard","Date","now","removeCard","splice","getPieColor","getPieDashArray","total","reduce","sum","d","circumference","PI","dash","getPieDashOffset","offset","setChartType","type","prevChartType","nextChartType","getChartTypeLabel","toggleChartTypeMenu","getMaxDeptCount","getLineChartPoints","xOffset","yOffset","map","dept","join","getAreaChartPoints","points","getDepartmentTotal","acc","getDepartmentPercentage","getColumnChartX","getColumnChartHeight","getColumnChartY","enterChartEditMode","exitChartEditMode","saveChartTypeToStorage","showChartTooltip","moveChartTooltip","hideChartTooltip","ngAfterViewInit","observer","IntersectionObserver","entries","entry","isIntersecting","threshold","el","observe","onTitleChange","selectedTitle","metric","find","m","setItem","stringify","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\Chan\\Desktop\\HRIS\\hris-frontend\\src\\app\\features\\personnel-information-management\\admin-dashboard\\admin-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit, HostListener, ViewChild, ElementRef, Renderer2 } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CdkDragDrop, moveItemInArray, CdkDrag, CdkDropList } from '@angular/cdk/drag-drop';\n\ninterface DepartmentStat {\n  name: string;\n  count: number;\n  percentage: number;\n}\n\ninterface Employee {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  department: string;\n  position: string;\n  hireDate: string;\n  status: string;\n  profileImage?: string;\n}\n\ninterface StatCard {\n  id: string;\n  title: string;\n  value: number;\n  change: number;\n  icon: string;\n  description: string;\n  isVisible: boolean;\n  color: string;\n  dataType: 'number' | 'percentage' | 'rating';\n}\n\n@Component({\n  selector: 'app-admin-dashboard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CdkDrag,\n    CdkDropList\n  ],\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.scss']\n})\nexport class AdminDashboardComponent implements OnInit {\n  @ViewChild(CdkDropList) dropList?: CdkDropList;\n  \n  title = 'Personnel Information Management';\n  \n  // Dashboard stats\n  totalEmployees = 345;\n  employeeChange = 5;\n  pendingRequests = 12;\n  requestChange = -2;\n  recentMovements = 23;\n  movementChange = 3;\n\n  // Analytics metrics\n  turnoverRate = 8.5;\n  turnoverRateChange = 1.2;\n  satisfactionLevel = 4.2;\n  satisfactionChange = 0.3;\n  performanceRating = 85;\n  performanceChange = 2.5;\n\n  departmentStats: DepartmentStat[] = [\n    { name: 'IT', count: 45, percentage: 30 },\n    { name: 'HR', count: 30, percentage: 20 },\n    { name: 'Finance', count: 25, percentage: 17 },\n    { name: 'Marketing', count: 20, percentage: 13 },\n    { name: 'Operations', count: 30, percentage: 20 },\n    { name: 'Graphics', count: 20, percentage: 40 }\n  ];\n\n  recentEmployees: Employee[] = [\n    {\n      id: 1,\n      firstName: 'Sarah',\n      lastName: 'Johnson',\n      email: 'sarah.j@acme.com',\n      department: 'Marketing',\n      position: 'Marketing Manager',\n      status: 'Active',\n      hireDate: '15 Jan 2020',\n      profileImage: 'https://randomuser.me/api/portraits/women/44.jpg'\n    },\n    {\n      id: 2,\n      firstName: 'Michael',\n      lastName: 'Chen',\n      email: 'michael.c@acme.com',\n      department: 'Engineering',\n      position: 'Senior Developer',\n      status: 'Active',\n      hireDate: '22 Mar 2019',\n      profileImage: 'https://randomuser.me/api/portraits/men/32.jpg'\n    },\n    {\n      id: 3,\n      firstName: 'Emily',\n      lastName: 'Rodriguez',\n      email: 'emily.r@acme.com',\n      department: 'Human Resources',\n      position: 'HR Specialist',\n      status: 'On Leave',\n      hireDate: '05 Aug 2021',\n      profileImage: 'https://randomuser.me/api/portraits/women/68.jpg'\n    },\n    {\n      id: 4,\n      firstName: 'David',\n      lastName: 'Wilson',\n      email: 'david.w@acme.com',\n      department: 'Finance',\n      position: 'Financial Analyst',\n      status: 'Active',\n      hireDate: '12 Nov 2022',\n      profileImage: 'https://randomuser.me/api/portraits/men/75.jpg'\n    },\n    {\n      id: 5,\n      firstName: 'Michael',\n      lastName: 'Chen',\n      email: 'michael.c@acme.com',\n      department: 'Engineering',\n      position: 'Senior Developer',\n      status: 'Active',\n      hireDate: '22 Mar 2019',\n      profileImage: 'https://randomuser.me/api/portraits/men/32.jpg'\n    },\n    {\n      id: 6,\n      firstName: 'Emily',\n      lastName: 'Rodriguez',\n      email: 'emily.r@acme.com',\n      department: 'Human Resources',\n      position: 'HR Specialist',\n      status: 'On Leave',\n      hireDate: '05 Aug 2021',\n      profileImage: 'https://randomuser.me/api/portraits/women/68.jpg'\n    },\n    {\n      id: 7,\n      firstName: 'David',\n      lastName: 'Wilson',\n      email: 'david.w@acme.com',\n      department: 'Finance',\n      position: 'Financial Analyst',\n      status: 'Active',\n      hireDate: '12 Nov 2022',\n      profileImage: 'https://randomuser.me/api/portraits/men/75.jpg'\n    }\n  ];\n\n  // Pagination properties\n  currentPage = 1;\n  pageSize = 5;\n  totalItems = 0;\n  totalPages = 0;\n  searchTerm = '';\n  paginatedEmployees: Employee[] = [];\n  Math = Math; // Make Math available in template\n\n  showEditModal = false;\n  editEmployeeForm: FormGroup;\n  selectedEmployee: Employee | null = null;\n\n  isEditMode = false;\n  selectedCard: StatCard | null = null;\n  showCustomizeModal = false;\n  customizeForm: FormGroup;\n  availableColors = [\n    { name: 'White', value: '#fff' },\n    { name: 'Blue', value: '#649dfa' },\n    { name: 'Green', value: '#38ffbd' },\n    { name: 'Purple', value: '#a182e8' },\n    { name: 'Orange', value: '#fc9751' },\n    { name: 'Yellow', value: '#f4fa57' },\n    { name: 'Cyan', value: \"#02faf6\"}\n  ];\n\n  statCards: StatCard[] = [\n    {\n      id: 'totalEmployees',\n      title: 'Total Employees',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/1077/1077114.png',\n      description: 'Current headcount',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'number'\n    },\n    {\n      id: 'pendingRequests',\n      title: 'Pending Requests',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/1828/1828843.png',\n      description: 'Awaiting approval',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'number'\n    },\n    {\n      id: 'recentMovements',\n      title: 'Recent Movements',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/747/747310.png',\n      description: 'Last 30 days',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'number'\n    },\n    {\n      id: 'turnoverRate',\n      title: 'Employee Turnover Rate',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',\n      description: 'Last 12 months',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'percentage'\n    },\n    {\n      id: 'satisfactionLevel',\n      title: 'Average Satisfaction Level',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',\n      description: 'Employee survey',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'percentage'\n    },\n    {\n      id: 'performanceRating',\n      title: 'Performance Rating',\n      value: 0,\n      change: 0,\n      icon: 'https://cdn-icons-png.flaticon.com/512/1828/1828971.png',\n      description: 'Average score',\n      isVisible: true,\n      color: '#1993e5',\n      dataType: 'rating'\n    }\n  ];\n\n  // New container template\n  newCardTemplate: StatCard = {\n    id: 'new',\n    title: 'New Stat',\n    value: 0,\n    change: 0,\n    icon: 'https://cdn-icons-png.flaticon.com/512/1828/1828843.png',\n    description: 'Add description',\n    isVisible: true,\n    color: '#fff',\n    dataType: 'number'\n  };\n\n  pieColors = ['#1993e5', '#10b981', '#f97316', '#8b5cf6', '#ef4444', '#6366f1', '#f59e42', '#22d3ee'];\n\n  chartTypes: Array<'pie' | 'bar' | 'line' | 'area'> = ['pie', 'bar', 'line', 'area'];\n  currentChartTypeIndex = 0;\n  chartType: 'pie' | 'bar' | 'line' | 'area' = 'pie';\n\n  showChartTypeMenu = false;\n\n  isChartEditMode = false;\n\n  // Tooltip state for chart hover\n  chartTooltip = {\n    visible: false,\n    x: 0,\n    y: 0,\n    label: '',\n    value: 0\n  };\n\n  totalActiveEmployees = 300;\n  totalInactiveEmployees = 30;\n  totalOnleaveEmployees = 15;\n\n  metricOptions: {\n    title: string;\n    value: number;\n    description: string;\n    dataType: 'number' | 'percentage' | 'rating';\n  }[] = [\n    {\n      title: 'Total Employees',\n      value: this.totalEmployees,\n      description: 'Current headcount',\n      dataType: 'number'\n    },\n    {\n      title: 'Pending Requests',\n      value: this.pendingRequests,\n      description: 'Awaiting approval',\n      dataType: 'number'\n    },\n    {\n      title: 'Recent Movements',\n      value: this.recentMovements,\n      description: 'Last 30 days',\n      dataType: 'number'\n    },\n    {\n      title: 'Employee Turnover Rate',\n      value: this.turnoverRate,\n      description: 'Last 12 months',\n      dataType: 'percentage'\n    },\n    {\n      title: 'Average Satisfaction Level',\n      value: this.satisfactionLevel,\n      description: 'Employee survey',\n      dataType: 'percentage'\n    },\n    {\n      title: 'Performance Rating',\n      value: this.performanceRating,\n      description: 'Average score',\n      dataType: 'rating'\n    },\n    {\n      title: 'Total Active Employees',\n      value: this.totalActiveEmployees,\n      description: 'Active employees',\n      dataType: 'number'\n    },\n    {\n      title: 'Total Inactive Employees',\n      value: this.totalInactiveEmployees,\n      description: 'Inactive employees',\n      dataType: 'number'\n    },\n    {\n      title: 'Total Onleave Employees',\n      value: this.totalOnleaveEmployees,\n      description: 'Employees on leave',\n      dataType: 'number'\n    }\n  ];\n\n  titleIconMap: { [key: string]: string } = {\n    'Total Employees': 'https://cdn-icons-png.flaticon.com/512/2922/2922510.png',\n    'Pending Requests': 'https://cdn-icons-png.flaticon.com/512/3596/3596095.png', \n    'Recent Movements': 'https://cdn-icons-png.flaticon.com/512/3303/3303892.png', \n    'Employee Turnover Rate': 'https://cdn-icons-png.flaticon.com/512/1040/1040230.png',\n    'Average Satisfaction Level': 'https://cdn-icons-png.flaticon.com/512/2583/2583395.png', \n    'Performance Rating': 'https://cdn-icons-png.flaticon.com/512/1828/1828884.png', \n    'Total Active Employees': 'https://cdn-icons-png.flaticon.com/512/190/190411.png', \n    'Total Inactive Employees': 'https://cdn-icons-png.flaticon.com/512/1828/1828843.png',\n    'Total Onleave Employees': 'https://cdn-icons-png.flaticon.com/512/11498/11498606.png' \n  };  \n\n  constructor(\n    private router: Router,\n    private fb: FormBuilder,\n    private renderer: Renderer2\n  ) {\n    this.editEmployeeForm = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      department: ['', Validators.required],\n      position: ['', Validators.required],\n      hireDate: ['', Validators.required],\n      status: ['Active', Validators.required]\n    });\n\n    this.customizeForm = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      color: ['#fff'],\n      dataType: ['number'],\n      isVisible: [true]\n    });\n  }\n\n  @HostListener('window:scroll', ['$event'])\n  onScroll() {\n    this.checkScroll();\n  }\n\n  ngOnInit(): void {\n    const savedCards = localStorage.getItem('statCards');\n    if (savedCards) {\n      this.statCards = JSON.parse(savedCards);\n    }\n    // Restore chart type if present\n    const savedChartType = localStorage.getItem('chartType');\n    if (savedChartType && this.chartTypes.includes(savedChartType as any)) {\n      this.chartType = savedChartType as any;\n      this.currentChartTypeIndex = this.chartTypes.indexOf(this.chartType);\n    }\n    this.updatePagination();\n    setTimeout(() => {\n      this.checkScroll();\n    }, 100);\n    // Initialize stat cards with actual data\n    this.statCards[0].value = this.totalEmployees;\n    this.statCards[0].change = this.employeeChange;\n    this.statCards[1].value = this.pendingRequests;\n    this.statCards[1].change = this.requestChange;\n    this.statCards[2].value = this.recentMovements;\n    this.statCards[2].change = this.movementChange;\n    this.statCards[3].value = this.turnoverRate;\n    this.statCards[3].change = this.turnoverRateChange;\n    this.statCards[4].value = this.satisfactionLevel;\n    this.statCards[4].change = this.satisfactionChange;\n    this.statCards[5].value = this.performanceRating;\n    this.statCards[5].change = this.performanceChange;\n  }\n\n  // Pagination methods\n  updatePagination() {\n    // Filter employees based on search term\n    let filteredEmployees = this.recentEmployees;\n    if (this.searchTerm) {\n      const searchLower = this.searchTerm.toLowerCase();\n      filteredEmployees = this.recentEmployees.filter(emp => \n        emp.firstName.toLowerCase().includes(searchLower) ||\n        emp.lastName.toLowerCase().includes(searchLower) ||\n        emp.department.toLowerCase().includes(searchLower) ||\n        emp.position.toLowerCase().includes(searchLower) ||\n        emp.status.toLowerCase().includes(searchLower)\n      );\n    }\n\n    this.totalItems = filteredEmployees.length;\n    this.totalPages = Math.ceil(this.totalItems / this.pageSize);\n\n    // Ensure current page is valid\n    if (this.currentPage > this.totalPages) {\n      this.currentPage = this.totalPages || 1;\n    }\n\n    // Get paginated data\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    this.paginatedEmployees = filteredEmployees.slice(startIndex, startIndex + this.pageSize);\n  }\n\n  onPageChange(page: number) {\n    this.currentPage = page;\n    this.updatePagination();\n    // Scroll to bottom of the page\n    setTimeout(() => {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth'\n      });\n    }, 100); // Small delay to ensure content is updated\n  }\n\n  onPageSizeChange(event: Event) {\n    const select = event.target as HTMLSelectElement;\n    this.pageSize = parseInt(select.value, 10);\n    this.currentPage = 1; // Reset to first page when changing page size\n    this.updatePagination();\n  }\n\n  onSearch(event: Event) {\n    const input = event.target as HTMLInputElement;\n    this.searchTerm = input.value;\n    this.currentPage = 1; // Reset to first page when searching\n    this.updatePagination();\n  }\n\n  getPageNumbers(): number[] {\n    const pages: number[] = [];\n    const maxVisiblePages = 5;\n    \n    if (this.totalPages <= maxVisiblePages) {\n      // Show all pages if total pages is less than max visible\n      for (let i = 1; i <= this.totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      // Always show first page\n      pages.push(1);\n      \n      // Calculate start and end of visible pages\n      let start = Math.max(2, this.currentPage - 1);\n      let end = Math.min(this.totalPages - 1, this.currentPage + 1);\n      \n      // Adjust if at the start\n      if (this.currentPage <= 2) {\n        end = 4;\n      }\n      // Adjust if at the end\n      if (this.currentPage >= this.totalPages - 1) {\n        start = this.totalPages - 3;\n      }\n      \n      // Add ellipsis if needed\n      if (start > 2) {\n        pages.push(-1); // -1 represents ellipsis\n      }\n      \n      // Add middle pages\n      for (let i = start; i <= end; i++) {\n        pages.push(i);\n      }\n      \n      // Add ellipsis if needed\n      if (end < this.totalPages - 1) {\n        pages.push(-2); // -2 represents ellipsis\n      }\n      \n      // Always show last page\n      pages.push(this.totalPages);\n    }\n    \n    return pages;\n  }\n\n  onAddEmployee(): void {\n    this.router.navigate(['/personnel-information-management/add-employee']);\n  }\n\n  onEditEmployee(employee: Employee) {\n    this.selectedEmployee = employee;\n    this.editEmployeeForm.patchValue({\n      firstName: employee.firstName,\n      lastName: employee.lastName,\n      email: employee.email,\n      department: employee.department,\n      position: employee.position,\n      hireDate: employee.hireDate,\n      status: employee.status\n    });\n    this.showEditModal = true;\n  }\n\n  closeEditModal(event: Event) {\n    event.preventDefault();\n    this.showEditModal = false;\n    this.selectedEmployee = null;\n    this.editEmployeeForm.reset();\n  }\n\n  onSubmitEdit() {\n    if (this.editEmployeeForm.valid && this.selectedEmployee) {\n      // Here you would typically make an API call to update the employee\n      const updatedEmployee = {\n        ...this.selectedEmployee,\n        ...this.editEmployeeForm.value\n      };\n\n      // Update the employee in the local array\n      const index = this.recentEmployees.findIndex(emp => emp.id === this.selectedEmployee?.id);\n      if (index !== -1) {\n        this.recentEmployees[index] = updatedEmployee;\n      }\n\n      // Close the modal\n      this.closeEditModal(new Event('click'));\n    }\n  }\n\n  onDeleteEmployee(employee: Employee): void {\n    if (confirm(`Are you sure you want to delete ${employee.firstName} ${employee.lastName}?`)) {\n      // Call service to delete employee\n      console.log('Deleting employee:', employee);\n    }\n  }\n\n  onProcessRequests(): void {\n    this.router.navigate(['/personnel-information-management/requests']);\n  }\n\n  getDepartmentIcon(department: string): string {\n    const icons: { [key: string]: string } = {\n      'IT': 'computer',\n      'HR': 'group',\n      'Finance': 'account_balance',\n      'Marketing': 'campaign',\n      'Operations': 'settings',\n      'Engineering': 'engineering',\n      'Sales': 'trending_up',\n      'Customer Support': 'support_agent',\n      'Research': 'science',\n      'Legal': 'gavel',\n      'Product': 'inventory_2',\n      'Design': 'palette'\n    };\n    return icons[department] || 'business';\n  }\n\n  private checkScroll() {\n    const elements = document.querySelectorAll('.scroll-animate');\n    elements.forEach(element => {\n      const rect = element.getBoundingClientRect();\n      const isVisible = (rect.top <= window.innerHeight * 0.95);\n      \n      if (isVisible) {\n        element.classList.add('visible');\n      }\n    });\n  }\n\n  toggleEditMode() {\n    this.isEditMode = !this.isEditMode;\n    if (this.dropList) {\n      const dropListElement = this.dropList.element.nativeElement;\n      if (this.isEditMode) {\n        this.renderer.addClass(dropListElement, 'edit-mode');\n      } else {\n        this.renderer.removeClass(dropListElement, 'edit-mode');\n        this.saveDashboardChanges();\n        this.saveStatCardsToStorage(); // Save card order on save\n      }\n    }\n  }\n\n  saveDashboardChanges() {\n    // Here you would typically make an API call to save the dashboard changes\n    console.log('Saving dashboard changes...');\n  }\n\n  onCardClick(card: StatCard) {\n    if (this.isEditMode) {\n      // Make a shallow copy for editing\n      this.selectedCard = { ...card };\n      this.customizeForm.patchValue({\n        title: card.title,\n        description: card.description,\n        color: card.color,\n        dataType: card.dataType,\n        isVisible: card.isVisible\n      });\n      this.showCustomizeModal = true;\n    }\n  }\n\n  saveCustomization() {\n    if (this.selectedCard && this.customizeForm.valid) {\n      const formValue = this.customizeForm.value;\n      // Find the card in statCards by id and update it\n      const idx = this.statCards.findIndex(c => c.id === this.selectedCard!.id);\n      if (idx !== -1) {\n        this.statCards[idx] = {\n          ...this.statCards[idx],\n          ...formValue,\n          icon: this.titleIconMap[formValue.title]\n        };\n      } else {\n        // If not found, it's a new card (from addNewCard)\n        const newCard: StatCard = {\n          ...this.selectedCard,\n          ...formValue,\n          icon: this.titleIconMap[formValue.title]\n        };\n        this.statCards.push(newCard);\n      }\n      this.showCustomizeModal = false;\n      this.selectedCard = null;\n      this.saveStatCardsToStorage();\n    }\n  }\n\n  closeCustomizeModal(event: Event) {\n    event.preventDefault();\n    this.showCustomizeModal = false;\n    this.selectedCard = null;\n  }\n\n  getFormattedValue(card: StatCard): string {\n    switch (card.dataType) {\n      case 'percentage':\n        return `${card.value}%`;\n      case 'rating':\n        return `${card.value}/5`;\n      default:\n        return card.value.toString();\n    }\n  }\n\n  onDrop(event: CdkDragDrop<StatCard[]>) {\n    if (this.isEditMode) {\n      const draggedElement = event.item.element.nativeElement;\n      const previousIndex = event.previousIndex;\n      const cards = Array.from(this.dropList?.element.nativeElement.children || []);\n      let pointerX: number | null = null;\n      let pointerY: number | null = null;\n      if ((event as any).event && (event as any).event.clientX !== undefined) {\n        pointerX = (event as any).event.clientX;\n        pointerY = (event as any).event.clientY;\n      }\n      let dropCenter = { x: 0, y: 0 };\n      if (pointerX !== null && pointerY !== null) {\n        dropCenter = { x: pointerX, y: pointerY };\n      } else {\n        const draggedRect = draggedElement.getBoundingClientRect();\n        dropCenter = {\n          x: draggedRect.left + draggedRect.width / 2,\n          y: draggedRect.top + draggedRect.height / 2\n        };\n      }\n      let minDistance = Number.MAX_VALUE;\n      let nearestIndex = previousIndex;\n      cards.forEach((card: any, idx: number) => {\n        if (idx === previousIndex) return;\n        const rect = card.getBoundingClientRect();\n        const center = {\n          x: rect.left + rect.width / 2,\n          y: rect.top + rect.height / 2\n        };\n        const distance = Math.sqrt(\n          Math.pow(center.x - dropCenter.x, 2) +\n          Math.pow(center.y - dropCenter.y, 2)\n        );\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestIndex = idx;\n        }\n      });\n      if (previousIndex !== nearestIndex) {\n        const temp = this.statCards[previousIndex];\n        this.statCards[previousIndex] = this.statCards[nearestIndex];\n        this.statCards[nearestIndex] = temp;\n        this.saveStatCardsToStorage(); // Save card order after swap\n      }\n    }\n  }\n\n  onDragStarted(event: any) {\n    if (this.isEditMode) {\n      document.body.classList.add('dragging');\n      \n      // Add a class to the dragged element\n      const draggedElement = event.source.element.nativeElement;\n      this.renderer.addClass(draggedElement, 'dragging');\n\n      // Add a class to the drop list\n      if (this.dropList) {\n        const dropListElement = this.dropList.element.nativeElement;\n        this.renderer.addClass(dropListElement, 'dragging-active');\n        this.renderer.addClass(dropListElement, 'edit-mode');\n      }\n    }\n  }\n\n  onDragEnded(event: any) {\n    document.body.classList.remove('dragging');\n    \n    // Remove classes from the dragged element\n    const draggedElement = event.source.element.nativeElement;\n    this.renderer.removeClass(draggedElement, 'dragging');\n    this.renderer.removeClass(draggedElement, 'swapping');\n    this.renderer.removeStyle(draggedElement, 'transform');\n\n    // Remove class from the drop list\n    if (this.dropList) {\n      const dropListElement = this.dropList.element.nativeElement;\n      this.renderer.removeClass(dropListElement, 'dragging-active');\n    }\n  }\n\n  addNewCard() {\n    if (this.isEditMode) {\n      // Prepare a new card but do not add to statCards yet\n      const newCard: StatCard = {\n        ...this.newCardTemplate,\n        id: `card-${Date.now()}` // Generate unique ID\n      };\n      this.selectedCard = { ...newCard };\n      this.customizeForm.patchValue({\n        title: newCard.title,\n        description: newCard.description,\n        color: newCard.color,\n        dataType: newCard.dataType,\n        isVisible: newCard.isVisible\n      });\n      this.showCustomizeModal = true;\n    }\n  }\n\n  removeCard(card: StatCard) {\n    if (this.isEditMode) {\n      const index = this.statCards.findIndex(c => c.id === card.id);\n      if (index !== -1) {\n        this.statCards.splice(index, 1);\n      }\n    }\n  }\n\n  getPieColor(index: number): string {\n    return this.pieColors[index % this.pieColors.length];\n  }\n\n  getPieDashArray(index: number): string {\n    const total = this.departmentStats.reduce((sum, d) => sum + d.count, 0);\n    const value = this.departmentStats[index].count;\n    const circumference = 2 * Math.PI * 90;\n    const dash = (value / total) * circumference;\n    return `${dash} ${circumference - dash}`;\n  }\n\n  getPieDashOffset(index: number): string {\n    const total = this.departmentStats.reduce((sum, d) => sum + d.count, 0);\n    const circumference = 2 * Math.PI * 90;\n    let offset = 0;\n    for (let i = 0; i < index; i++) {\n      offset += (this.departmentStats[i].count / total) * circumference;\n    }\n    return `${-offset}`;\n  }\n\n  setChartType(type: 'pie' | 'bar' | 'line' | 'area') {\n    this.chartType = type;\n    this.currentChartTypeIndex = this.chartTypes.indexOf(type);\n  }\n\n  prevChartType() {\n    this.currentChartTypeIndex = (this.currentChartTypeIndex - 1 + this.chartTypes.length) % this.chartTypes.length;\n    this.chartType = this.chartTypes[this.currentChartTypeIndex];\n  }\n\n  nextChartType() {\n    this.currentChartTypeIndex = (this.currentChartTypeIndex + 1) % this.chartTypes.length;\n    this.chartType = this.chartTypes[this.currentChartTypeIndex];\n  }\n\n  getChartTypeLabel(): string {\n    switch (this.chartType) {\n      case 'pie': return 'Pie';\n      case 'bar': return 'Bar';\n      case 'line': return 'Line';\n      case 'area': return 'Area';\n      default: return '';\n    }\n  }\n\n  toggleChartTypeMenu() {\n    this.showChartTypeMenu = !this.showChartTypeMenu;\n  }\n\n  getMaxDeptCount(): number {\n    return this.departmentStats.reduce((max, d) => Math.max(max, d.count), 0) || 1;\n  }\n\n  getLineChartPoints(xOffset = 0, yOffset = 0): string {\n    if (!this.departmentStats || !this.departmentStats.length) return '';\n    return this.departmentStats.map((dept, i) => {\n      const x = 54 + i * 40 + xOffset;\n      const y = 200 - (dept.count / this.getMaxDeptCount()) * 160 + yOffset;\n      return `${x},${y}`;\n    }).join(' ');\n  }\n\n  getAreaChartPoints(xOffset = 0, yOffset = 0): string {\n    if (!this.departmentStats || !this.departmentStats.length) return '';\n    let points = this.departmentStats.map((dept, i) => {\n      const x = 54 + i * 40 + xOffset;\n      const y = 200 - (dept.count / this.getMaxDeptCount()) * 160 + yOffset;\n      return `${x},${y}`;\n    });\n    // Close the area shape to the bottom\n    points.push(`${54 + (this.departmentStats.length - 1) * 40 + xOffset},200`);\n    points.push(`54,200`);\n    return points.join(' ');\n  }\n\n  getDepartmentTotal(): number {\n    return this.departmentStats.reduce((acc, d) => acc + d.count, 0);\n  }\n\n  getDepartmentPercentage(dept: DepartmentStat): number {\n    const total = this.getDepartmentTotal();\n    return total ? (dept.count / total) * 100 : 0;\n  }\n\n  // Helper for column chart (optional, but for demo, columns are like bars with spacing)\n  getColumnChartX(i: number): number {\n    return 20 + i * 35;\n  }\n\n  getColumnChartHeight(dept: DepartmentStat): number {\n    return (dept.count / this.getMaxDeptCount()) * 180;\n  }\n\n  getColumnChartY(dept: DepartmentStat): number {\n    return 220 - this.getColumnChartHeight(dept) - 20;\n  }\n\n  enterChartEditMode() {\n    this.isChartEditMode = true;\n  }\n\n  exitChartEditMode() {\n    this.isChartEditMode = false;\n    this.saveChartTypeToStorage();\n  }\n\n  showChartTooltip(event: MouseEvent, label: string, value: number) {\n    this.chartTooltip.visible = true;\n    this.chartTooltip.x = event.clientX;\n    this.chartTooltip.y = event.clientY;\n    this.chartTooltip.label = label;\n    this.chartTooltip.value = value;\n  }\n\n  moveChartTooltip(event: MouseEvent) {\n    if (this.chartTooltip.visible) {\n      this.chartTooltip.x = event.clientX;\n      this.chartTooltip.y = event.clientY;\n    }\n  }\n\n  hideChartTooltip() {\n    this.chartTooltip.visible = false;\n  }\n\n  ngAfterViewInit() {\n    const elements = document.querySelectorAll('.scroll-animate');\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('visible');\n        }\n      });\n    }, { threshold: 0.15 });\n\n    elements.forEach(el => observer.observe(el));\n  }\n\n  onTitleChange(event: Event) {\n    const selectedTitle = (event.target as HTMLSelectElement).value;\n    const metric = this.metricOptions.find((m: { title: string }) => m.title === selectedTitle);\n    if (metric && this.selectedCard) {\n      this.customizeForm.patchValue({\n        title: metric.title,\n        description: metric.description,\n        dataType: metric.dataType\n      });\n      this.selectedCard.value = metric.value;\n      this.selectedCard.description = metric.description;\n      this.selectedCard.dataType = metric.dataType;\n      this.selectedCard.icon = this.titleIconMap[metric.title];\n    }\n  }\n\n  saveStatCardsToStorage() {\n    localStorage.setItem('statCards', JSON.stringify(this.statCards));\n  }\n\n  saveChartTypeToStorage() {\n    localStorage.setItem('chartType', this.chartType);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}