{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class WidgetConfigService {\n  constructor() {\n    this.STORAGE_KEY = 'dashboard_widgets';\n    this.widgetsSubject = new BehaviorSubject([]);\n    this.widgets$ = this.widgetsSubject.asObservable();\n    this.loadWidgets();\n  }\n  loadWidgets() {\n    const savedWidgets = localStorage.getItem(this.STORAGE_KEY);\n    if (savedWidgets) {\n      this.widgetsSubject.next(JSON.parse(savedWidgets));\n    } else {\n      // Default widgets\n      const defaultWidgets = [{\n        id: '1',\n        type: 'employee-stats',\n        title: 'Employee Overview',\n        position: 1,\n        size: 'medium',\n        enabled: true,\n        settings: {}\n      }, {\n        id: '2',\n        type: 'department-distribution',\n        title: 'Department Stats',\n        position: 2,\n        size: 'large',\n        enabled: true,\n        settings: {}\n      }, {\n        id: '3',\n        type: 'recent-activities',\n        title: 'Recent Activities',\n        position: 3,\n        size: 'medium',\n        enabled: true,\n        settings: {}\n      }];\n      this.widgetsSubject.next(defaultWidgets);\n      this.saveWidgets(defaultWidgets);\n    }\n  }\n  getWidgets() {\n    return this.widgets$;\n  }\n  addWidget(widget) {\n    const currentWidgets = this.widgetsSubject.value;\n    const newWidget = {\n      ...widget,\n      id: Date.now().toString()\n    };\n    this.saveWidgets([...currentWidgets, newWidget]);\n  }\n  updateWidget(widget) {\n    const currentWidgets = this.widgetsSubject.value;\n    const index = currentWidgets.findIndex(w => w.id === widget.id);\n    if (index !== -1) {\n      currentWidgets[index] = widget;\n      this.saveWidgets(currentWidgets);\n    }\n  }\n  deleteWidget(widgetId) {\n    const currentWidgets = this.widgetsSubject.value;\n    this.saveWidgets(currentWidgets.filter(w => w.id !== widgetId));\n  }\n  updateWidgetPosition(widgetId, newPosition) {\n    const currentWidgets = this.widgetsSubject.value;\n    const widget = currentWidgets.find(w => w.id === widgetId);\n    if (widget) {\n      widget.position = newPosition;\n      this.saveWidgets(currentWidgets);\n    }\n  }\n  toggleWidget(widgetId) {\n    const currentWidgets = this.widgetsSubject.value;\n    const widget = currentWidgets.find(w => w.id === widgetId);\n    if (widget) {\n      widget.enabled = !widget.enabled;\n      this.saveWidgets(currentWidgets);\n    }\n  }\n  saveWidgets(widgets) {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(widgets));\n    this.widgetsSubject.next(widgets);\n  }\n  static {\n    this.ɵfac = function WidgetConfigService_Factory(t) {\n      return new (t || WidgetConfigService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WidgetConfigService,\n      factory: WidgetConfigService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","WidgetConfigService","constructor","STORAGE_KEY","widgetsSubject","widgets$","asObservable","loadWidgets","savedWidgets","localStorage","getItem","next","JSON","parse","defaultWidgets","id","type","title","position","size","enabled","settings","saveWidgets","getWidgets","addWidget","widget","currentWidgets","value","newWidget","Date","now","toString","updateWidget","index","findIndex","w","deleteWidget","widgetId","filter","updateWidgetPosition","newPosition","find","toggleWidget","widgets","setItem","stringify","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Chan\\Desktop\\HRIS\\hris-frontend\\src\\app\\features\\personnel-information-management\\admin-dashboard\\widget-config\\widget-config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface WidgetConfig {\r\n  id: string;\r\n  type: string;\r\n  title: string;\r\n  position: number;\r\n  size: 'small' | 'medium' | 'large';\r\n  enabled: boolean;\r\n  settings: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WidgetConfigService {\r\n  private readonly STORAGE_KEY = 'dashboard_widgets';\r\n  private widgetsSubject = new BehaviorSubject<WidgetConfig[]>([]);\r\n  public widgets$ = this.widgetsSubject.asObservable();\r\n\r\n  constructor() {\r\n    this.loadWidgets();\r\n  }\r\n\r\n  private loadWidgets() {\r\n    const savedWidgets = localStorage.getItem(this.STORAGE_KEY);\r\n    if (savedWidgets) {\r\n      this.widgetsSubject.next(JSON.parse(savedWidgets));\r\n    } else {\r\n      // Default widgets\r\n      const defaultWidgets: WidgetConfig[] = [\r\n        {\r\n          id: '1',\r\n          type: 'employee-stats',\r\n          title: 'Employee Overview',\r\n          position: 1,\r\n          size: 'medium',\r\n          enabled: true,\r\n          settings: {}\r\n        },\r\n        {\r\n          id: '2',\r\n          type: 'department-distribution',\r\n          title: 'Department Stats',\r\n          position: 2,\r\n          size: 'large',\r\n          enabled: true,\r\n          settings: {}\r\n        },\r\n        {\r\n          id: '3',\r\n          type: 'recent-activities',\r\n          title: 'Recent Activities',\r\n          position: 3,\r\n          size: 'medium',\r\n          enabled: true,\r\n          settings: {}\r\n        }\r\n      ];\r\n      this.widgetsSubject.next(defaultWidgets);\r\n      this.saveWidgets(defaultWidgets);\r\n    }\r\n  }\r\n\r\n  getWidgets(): Observable<WidgetConfig[]> {\r\n    return this.widgets$;\r\n  }\r\n\r\n  addWidget(widget: Omit<WidgetConfig, 'id'>): void {\r\n    const currentWidgets = this.widgetsSubject.value;\r\n    const newWidget: WidgetConfig = {\r\n      ...widget,\r\n      id: Date.now().toString()\r\n    };\r\n    this.saveWidgets([...currentWidgets, newWidget]);\r\n  }\r\n\r\n  updateWidget(widget: WidgetConfig): void {\r\n    const currentWidgets = this.widgetsSubject.value;\r\n    const index = currentWidgets.findIndex(w => w.id === widget.id);\r\n    if (index !== -1) {\r\n      currentWidgets[index] = widget;\r\n      this.saveWidgets(currentWidgets);\r\n    }\r\n  }\r\n\r\n  deleteWidget(widgetId: string): void {\r\n    const currentWidgets = this.widgetsSubject.value;\r\n    this.saveWidgets(currentWidgets.filter(w => w.id !== widgetId));\r\n  }\r\n\r\n  updateWidgetPosition(widgetId: string, newPosition: number): void {\r\n    const currentWidgets = this.widgetsSubject.value;\r\n    const widget = currentWidgets.find(w => w.id === widgetId);\r\n    if (widget) {\r\n      widget.position = newPosition;\r\n      this.saveWidgets(currentWidgets);\r\n    }\r\n  }\r\n\r\n  toggleWidget(widgetId: string): void {\r\n    const currentWidgets = this.widgetsSubject.value;\r\n    const widget = currentWidgets.find(w => w.id === widgetId);\r\n    if (widget) {\r\n      widget.enabled = !widget.enabled;\r\n      this.saveWidgets(currentWidgets);\r\n    }\r\n  }\r\n\r\n  private saveWidgets(widgets: WidgetConfig[]): void {\r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(widgets));\r\n    this.widgetsSubject.next(widgets);\r\n  }\r\n} "],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAelD,OAAM,MAAOC,mBAAmB;EAK9BC,YAAA;IAJiB,KAAAC,WAAW,GAAG,mBAAmB;IAC1C,KAAAC,cAAc,GAAG,IAAIJ,eAAe,CAAiB,EAAE,CAAC;IACzD,KAAAK,QAAQ,GAAG,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;IAGlD,IAAI,CAACC,WAAW,EAAE;EACpB;EAEQA,WAAWA,CAAA;IACjB,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACP,WAAW,CAAC;IAC3D,IAAIK,YAAY,EAAE;MAChB,IAAI,CAACJ,cAAc,CAACO,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,YAAY,CAAC,CAAC;KACnD,MAAM;MACL;MACA,MAAMM,cAAc,GAAmB,CACrC;QACEC,EAAE,EAAE,GAAG;QACPC,IAAI,EAAE,gBAAgB;QACtBC,KAAK,EAAE,mBAAmB;QAC1BC,QAAQ,EAAE,CAAC;QACXC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE;OACX,EACD;QACEN,EAAE,EAAE,GAAG;QACPC,IAAI,EAAE,yBAAyB;QAC/BC,KAAK,EAAE,kBAAkB;QACzBC,QAAQ,EAAE,CAAC;QACXC,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE;OACX,EACD;QACEN,EAAE,EAAE,GAAG;QACPC,IAAI,EAAE,mBAAmB;QACzBC,KAAK,EAAE,mBAAmB;QAC1BC,QAAQ,EAAE,CAAC;QACXC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE;OACX,CACF;MACD,IAAI,CAACjB,cAAc,CAACO,IAAI,CAACG,cAAc,CAAC;MACxC,IAAI,CAACQ,WAAW,CAACR,cAAc,CAAC;;EAEpC;EAEAS,UAAUA,CAAA;IACR,OAAO,IAAI,CAAClB,QAAQ;EACtB;EAEAmB,SAASA,CAACC,MAAgC;IACxC,MAAMC,cAAc,GAAG,IAAI,CAACtB,cAAc,CAACuB,KAAK;IAChD,MAAMC,SAAS,GAAiB;MAC9B,GAAGH,MAAM;MACTV,EAAE,EAAEc,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ;KACxB;IACD,IAAI,CAACT,WAAW,CAAC,CAAC,GAAGI,cAAc,EAAEE,SAAS,CAAC,CAAC;EAClD;EAEAI,YAAYA,CAACP,MAAoB;IAC/B,MAAMC,cAAc,GAAG,IAAI,CAACtB,cAAc,CAACuB,KAAK;IAChD,MAAMM,KAAK,GAAGP,cAAc,CAACQ,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAKU,MAAM,CAACV,EAAE,CAAC;IAC/D,IAAIkB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBP,cAAc,CAACO,KAAK,CAAC,GAAGR,MAAM;MAC9B,IAAI,CAACH,WAAW,CAACI,cAAc,CAAC;;EAEpC;EAEAU,YAAYA,CAACC,QAAgB;IAC3B,MAAMX,cAAc,GAAG,IAAI,CAACtB,cAAc,CAACuB,KAAK;IAChD,IAAI,CAACL,WAAW,CAACI,cAAc,CAACY,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAKsB,QAAQ,CAAC,CAAC;EACjE;EAEAE,oBAAoBA,CAACF,QAAgB,EAAEG,WAAmB;IACxD,MAAMd,cAAc,GAAG,IAAI,CAACtB,cAAc,CAACuB,KAAK;IAChD,MAAMF,MAAM,GAAGC,cAAc,CAACe,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAKsB,QAAQ,CAAC;IAC1D,IAAIZ,MAAM,EAAE;MACVA,MAAM,CAACP,QAAQ,GAAGsB,WAAW;MAC7B,IAAI,CAAClB,WAAW,CAACI,cAAc,CAAC;;EAEpC;EAEAgB,YAAYA,CAACL,QAAgB;IAC3B,MAAMX,cAAc,GAAG,IAAI,CAACtB,cAAc,CAACuB,KAAK;IAChD,MAAMF,MAAM,GAAGC,cAAc,CAACe,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAKsB,QAAQ,CAAC;IAC1D,IAAIZ,MAAM,EAAE;MACVA,MAAM,CAACL,OAAO,GAAG,CAACK,MAAM,CAACL,OAAO;MAChC,IAAI,CAACE,WAAW,CAACI,cAAc,CAAC;;EAEpC;EAEQJ,WAAWA,CAACqB,OAAuB;IACzClC,YAAY,CAACmC,OAAO,CAAC,IAAI,CAACzC,WAAW,EAAES,IAAI,CAACiC,SAAS,CAACF,OAAO,CAAC,CAAC;IAC/D,IAAI,CAACvC,cAAc,CAACO,IAAI,CAACgC,OAAO,CAAC;EACnC;;;uBAjGW1C,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAA6C,OAAA,EAAnB7C,mBAAmB,CAAA8C,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}