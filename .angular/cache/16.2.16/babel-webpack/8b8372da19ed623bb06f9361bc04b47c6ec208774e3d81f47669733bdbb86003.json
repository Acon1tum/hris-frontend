{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const requiredRoles = route.data['roles'];\n    if (!requiredRoles || requiredRoles.length === 0) {\n      return true; // No roles required, allow access\n    }\n\n    if (!this.authService.isAuthenticated()) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n    if (this.authService.canAccess(requiredRoles)) {\n      return true;\n    }\n    // User doesn't have required role, redirect to dashboard\n    this.router.navigate(['/dashboard']);\n    return false;\n  }\n  static {\n    this.ɵfac = function RoleGuard_Factory(t) {\n      return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoleGuard,\n      factory: RoleGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["RoleGuard","constructor","authService","router","canActivate","route","state","requiredRoles","data","length","isAuthenticated","navigate","canAccess","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Chan\\Desktop\\HRIS\\hris-frontend\\src\\app\\guards\\role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService, UserRole } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const requiredRoles = route.data['roles'] as UserRole[];\r\n    \r\n    if (!requiredRoles || requiredRoles.length === 0) {\r\n      return true; // No roles required, allow access\r\n    }\r\n\r\n    if (!this.authService.isAuthenticated()) {\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n\r\n    if (this.authService.canAccess(requiredRoles)) {\r\n      return true;\r\n    }\r\n\r\n    // User doesn't have required role, redirect to dashboard\r\n    this.router.navigate(['/dashboard']);\r\n    return false;\r\n  }\r\n} "],"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,aAAa,GAAGF,KAAK,CAACG,IAAI,CAAC,OAAO,CAAe;IAEvD,IAAI,CAACD,aAAa,IAAIA,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;MAChD,OAAO,IAAI,CAAC,CAAC;;;IAGf,IAAI,CAAC,IAAI,CAACP,WAAW,CAACQ,eAAe,EAAE,EAAE;MACvC,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;IAGd,IAAI,IAAI,CAACT,WAAW,CAACU,SAAS,CAACL,aAAa,CAAC,EAAE;MAC7C,OAAO,IAAI;;IAGb;IACA,IAAI,CAACJ,MAAM,CAACQ,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IACpC,OAAO,KAAK;EACd;;;uBAzBWX,SAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATlB,SAAS;MAAAmB,OAAA,EAATnB,SAAS,CAAAoB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}