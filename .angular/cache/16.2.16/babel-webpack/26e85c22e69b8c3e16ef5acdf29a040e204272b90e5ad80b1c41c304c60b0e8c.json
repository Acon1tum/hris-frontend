{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var UserRole;\n(function (UserRole) {\n  UserRole[\"ADMIN\"] = \"admin\";\n  UserRole[\"HR_MANAGER\"] = \"hr_manager\";\n  UserRole[\"HR_STAFF\"] = \"hr_staff\";\n  UserRole[\"MANAGER\"] = \"manager\";\n  UserRole[\"EMPLOYEE\"] = \"employee\";\n  UserRole[\"GUEST\"] = \"guest\";\n})(UserRole || (UserRole = {}));\nexport class AuthService {\n  constructor() {\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Check if user is logged in from localStorage\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  login(username, password) {\n    // Mock login - in real app, this would call an API\n    return new Observable(observer => {\n      setTimeout(() => {\n        let user;\n        // Demo users based on username\n        switch (username.toLowerCase()) {\n          case 'admin':\n            user = {\n              id: 1,\n              username: 'admin',\n              email: 'admin@company.com',\n              role: UserRole.ADMIN,\n              name: 'System Administrator',\n              avatar: 'https://randomuser.me/api/portraits/men/1.jpg'\n            };\n            break;\n          case 'hr':\n            user = {\n              id: 2,\n              username: 'hr',\n              email: 'hr@company.com',\n              role: UserRole.HR_MANAGER,\n              name: 'HR Manager',\n              avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\n            };\n            break;\n          case 'manager':\n            user = {\n              id: 3,\n              username: 'manager',\n              email: 'manager@company.com',\n              role: UserRole.MANAGER,\n              name: 'Department Manager',\n              avatar: 'https://randomuser.me/api/portraits/men/3.jpg'\n            };\n            break;\n          case 'employee':\n            user = {\n              id: 4,\n              username: 'employee',\n              email: 'employee@company.com',\n              role: UserRole.EMPLOYEE,\n              name: 'Regular Employee',\n              avatar: 'https://randomuser.me/api/portraits/women/4.jpg'\n            };\n            break;\n          default:\n            user = {\n              id: 5,\n              username: 'guest',\n              email: 'guest@company.com',\n              role: UserRole.GUEST,\n              name: 'Guest User',\n              avatar: 'https://randomuser.me/api/portraits/men/5.jpg'\n            };\n        }\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        observer.next(user);\n        observer.complete();\n      }, 1000);\n    });\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isAuthenticated() {\n    return this.currentUserSubject.value !== null;\n  }\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user?.role === role;\n  }\n  hasAnyRole(roles) {\n    const user = this.getCurrentUser();\n    return user ? roles.includes(user.role) : false;\n  }\n  canAccess(requiredRoles) {\n    return this.hasAnyRole(requiredRoles);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","Observable","UserRole","AuthService","constructor","currentUserSubject","currentUser$","asObservable","storedUser","localStorage","getItem","next","JSON","parse","login","username","password","observer","setTimeout","user","toLowerCase","id","email","role","ADMIN","name","avatar","HR_MANAGER","MANAGER","EMPLOYEE","GUEST","setItem","stringify","complete","logout","removeItem","getCurrentUser","value","isAuthenticated","hasRole","hasAnyRole","roles","includes","canAccess","requiredRoles","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Chan\\Desktop\\HRIS\\hris-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface User {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n  role: UserRole;\r\n  name: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport enum UserRole {\r\n  ADMIN = 'admin',\r\n  HR_MANAGER = 'hr_manager',\r\n  HR_STAFF = 'hr_staff',\r\n  MANAGER = 'manager',\r\n  EMPLOYEE = 'employee',\r\n  GUEST = 'guest'\r\n}\r\n\r\nexport interface MenuItem {\r\n  name: string;\r\n  path: string;\r\n  icon: string;\r\n  badge?: string;\r\n  roles: UserRole[];\r\n  children?: MenuItem[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor() {\r\n    // Check if user is logged in from localStorage\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    if (storedUser) {\r\n      this.currentUserSubject.next(JSON.parse(storedUser));\r\n    }\r\n  }\r\n\r\n  login(username: string, password: string): Observable<User> {\r\n    // Mock login - in real app, this would call an API\r\n    return new Observable(observer => {\r\n      setTimeout(() => {\r\n        let user: User;\r\n        \r\n        // Demo users based on username\r\n        switch (username.toLowerCase()) {\r\n          case 'admin':\r\n            user = {\r\n              id: 1,\r\n              username: 'admin',\r\n              email: 'admin@company.com',\r\n              role: UserRole.ADMIN,\r\n              name: 'System Administrator',\r\n              avatar: 'https://randomuser.me/api/portraits/men/1.jpg'\r\n            };\r\n            break;\r\n          case 'hr':\r\n            user = {\r\n              id: 2,\r\n              username: 'hr',\r\n              email: 'hr@company.com',\r\n              role: UserRole.HR_MANAGER,\r\n              name: 'HR Manager',\r\n              avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\r\n            };\r\n            break;\r\n          case 'manager':\r\n            user = {\r\n              id: 3,\r\n              username: 'manager',\r\n              email: 'manager@company.com',\r\n              role: UserRole.MANAGER,\r\n              name: 'Department Manager',\r\n              avatar: 'https://randomuser.me/api/portraits/men/3.jpg'\r\n            };\r\n            break;\r\n          case 'employee':\r\n            user = {\r\n              id: 4,\r\n              username: 'employee',\r\n              email: 'employee@company.com',\r\n              role: UserRole.EMPLOYEE,\r\n              name: 'Regular Employee',\r\n              avatar: 'https://randomuser.me/api/portraits/women/4.jpg'\r\n            };\r\n            break;\r\n          default:\r\n            user = {\r\n              id: 5,\r\n              username: 'guest',\r\n              email: 'guest@company.com',\r\n              role: UserRole.GUEST,\r\n              name: 'Guest User',\r\n              avatar: 'https://randomuser.me/api/portraits/men/5.jpg'\r\n            };\r\n        }\r\n\r\n        localStorage.setItem('currentUser', JSON.stringify(user));\r\n        this.currentUserSubject.next(user);\r\n        observer.next(user);\r\n        observer.complete();\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('currentUser');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.currentUserSubject.value !== null;\r\n  }\r\n\r\n  hasRole(role: UserRole): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user?.role === role;\r\n  }\r\n\r\n  hasAnyRole(roles: UserRole[]): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user ? roles.includes(user.role) : false;\r\n  }\r\n\r\n  canAccess(requiredRoles: UserRole[]): boolean {\r\n    return this.hasAnyRole(requiredRoles);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}