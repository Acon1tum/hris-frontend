{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(router) {\n    this.router = router;\n    this.loginSuccess = new EventEmitter();\n    this.loginData = {\n      email: '',\n      password: '',\n      rememberMe: false\n    };\n    this.isLoading = false;\n    this.showPassword = false;\n    this.errorMessage = '';\n  }\n  onLogin() {\n    this.isLoading = true;\n    this.errorMessage = '';\n    // Simulate API call\n    setTimeout(() => {\n      // Mock authentication - replace with actual API call\n      if (this.loginData.email === 'admin@hris.com' && this.loginData.password === 'admin123') {\n        // Store authentication token/user data\n        localStorage.setItem('isAuthenticated', 'true');\n        localStorage.setItem('user', JSON.stringify({\n          name: 'John Doe',\n          email: this.loginData.email,\n          role: 'Administrator'\n        }));\n        // Emit login success event\n        this.loginSuccess.emit();\n        // Navigate to dashboard\n        this.router.navigate(['/dashboard']);\n      } else {\n        this.errorMessage = 'Invalid email or password. Please try again.';\n      }\n      this.isLoading = false;\n    }, 1500);\n  }\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n  onForgotPassword() {\n    // Implement forgot password functionality\n    console.log('Forgot password clicked');\n  }\n  onDemoLogin() {\n    this.loginData.email = 'admin@hris.com';\n    this.loginData.password = 'admin123';\n    this.onLogin();\n  }\n};\n__decorate([Output()], LoginComponent.prototype, \"loginSuccess\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);","map":{"version":3,"names":["Component","Output","EventEmitter","CommonModule","FormsModule","LoginComponent","constructor","router","loginSuccess","loginData","email","password","rememberMe","isLoading","showPassword","errorMessage","onLogin","setTimeout","localStorage","setItem","JSON","stringify","name","role","emit","navigate","togglePasswordVisibility","onForgotPassword","console","log","onDemoLogin","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["D:\\Quanby\\New folder (2)\\1\\hris-frontend\\src\\app\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule,FormsModule],\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent {\r\n  @Output() loginSuccess = new EventEmitter<void>();\r\n\r\n  loginData = {\r\n    email: '',\r\n    password: '',\r\n    rememberMe: false\r\n  };\r\n\r\n  isLoading = false;\r\n  showPassword = false;\r\n  errorMessage = '';\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  onLogin() {\r\n    this.isLoading = true;\r\n    this.errorMessage = '';\r\n\r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      // Mock authentication - replace with actual API call\r\n      if (this.loginData.email === 'admin@hris.com' && this.loginData.password === 'admin123') {\r\n        // Store authentication token/user data\r\n        localStorage.setItem('isAuthenticated', 'true');\r\n        localStorage.setItem('user', JSON.stringify({\r\n          name: 'John Doe',\r\n          email: this.loginData.email,\r\n          role: 'Administrator'\r\n        }));\r\n\r\n        // Emit login success event\r\n        this.loginSuccess.emit();\r\n\r\n        // Navigate to dashboard\r\n        this.router.navigate(['/dashboard']);\r\n      } else {\r\n        this.errorMessage = 'Invalid email or password. Please try again.';\r\n      }\r\n      this.isLoading = false;\r\n    }, 1500);\r\n  }\r\n\r\n  togglePasswordVisibility() {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n\r\n  onForgotPassword() {\r\n    // Implement forgot password functionality\r\n    console.log('Forgot password clicked');\r\n  }\r\n\r\n  onDemoLogin() {\r\n    this.loginData.email = 'admin@hris.com';\r\n    this.loginData.password = 'admin123';\r\n    this.onLogin();\r\n  }\r\n} "],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAC/D,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,QAAQ,gBAAgB;AAUrC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAazBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAZhB,KAAAC,YAAY,GAAG,IAAIN,YAAY,EAAQ;IAEjD,KAAAO,SAAS,GAAG;MACVC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;KACb;IAED,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,YAAY,GAAG,KAAK;IACpB,KAAAC,YAAY,GAAG,EAAE;EAEoB;EAErCC,OAAOA,CAAA;IACL,IAAI,CAACH,SAAS,GAAG,IAAI;IACrB,IAAI,CAACE,YAAY,GAAG,EAAE;IAEtB;IACAE,UAAU,CAAC,MAAK;MACd;MACA,IAAI,IAAI,CAACR,SAAS,CAACC,KAAK,KAAK,gBAAgB,IAAI,IAAI,CAACD,SAAS,CAACE,QAAQ,KAAK,UAAU,EAAE;QACvF;QACAO,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;QAC/CD,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;UAC1CC,IAAI,EAAE,UAAU;UAChBZ,KAAK,EAAE,IAAI,CAACD,SAAS,CAACC,KAAK;UAC3Ba,IAAI,EAAE;SACP,CAAC,CAAC;QAEH;QACA,IAAI,CAACf,YAAY,CAACgB,IAAI,EAAE;QAExB;QACA,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;OACrC,MAAM;QACL,IAAI,CAACV,YAAY,GAAG,8CAA8C;;MAEpE,IAAI,CAACF,SAAS,GAAG,KAAK;IACxB,CAAC,EAAE,IAAI,CAAC;EACV;EAEAa,wBAAwBA,CAAA;IACtB,IAAI,CAACZ,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEAa,gBAAgBA,CAAA;IACd;IACAC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACxC;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACrB,SAAS,CAACC,KAAK,GAAG,gBAAgB;IACvC,IAAI,CAACD,SAAS,CAACE,QAAQ,GAAG,UAAU;IACpC,IAAI,CAACK,OAAO,EAAE;EAChB;CACD;AAxDWe,UAAA,EAAT9B,MAAM,EAAE,C,mDAAyC;AADvCI,cAAc,GAAA0B,UAAA,EAP1B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,WAAW;EACrBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAAC/B,YAAY,EAACC,WAAW,CAAC;EACnC+B,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACW/B,cAAc,CAyD1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}